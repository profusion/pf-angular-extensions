# This reusable workflow verifies an Angular library's package.json file.
name: Verify Package

on:
  workflow_call:
    inputs:
      library_path:
        description: 'Path to the library source (e.g., projects/my-lib)'
        required: true
        type: string
      library_name:
        description: 'The project name of the library (e.g., my-lib)'
        required: true
        type: string
      org_scope:
        description: 'The npm organization scope (e.g., @my-company)'
        required: true
        type: string
    outputs:
      version:
        description: 'The version from package.json'
        value: ${{ jobs.verify.outputs.version }}
      lib_name:
        description: 'The full name of the library from package.json'
        value: ${{ jobs.verify.outputs.lib_name }}

jobs:
  verify:
    name: Verify Package Details
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      lib_name: ${{ steps.get_lib_name.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from package.json
        id: get_version
        run: |
          echo "version=$(jq -r '.version' ./${{ inputs.library_path }}/package.json)" >> $GITHUB_OUTPUT

      - name: Get library name from package.json
        id: get_lib_name
        run: |
          echo "name=$(jq -r '.name' ./${{ inputs.library_path }}/package.json)" >> $GITHUB_OUTPUT

      - name: Verify package scope
        run: |
          if [[ "${{ steps.get_lib_name.outputs.name }}" != ${{ inputs.org_scope }}* ]]; then
            echo "Error: Package name '${{ steps.get_lib_name.outputs.name }}' is not scoped with '${{ inputs.org_scope }}'."
            exit 1
          fi
          echo "✔ Package scope is correct."

      - name: Read publish config from package.json
        id: get_publish_config
        run: |
          echo "value=$(jq -r '.publishConfig.access' ./${{ inputs.library_path }}/package.json)" >> $GITHUB_OUTPUT

      - name: Check publish config value
        run: |
          if [[ "${{ steps.get_publish_config.outputs.value }}" != "public" ]]; then
            echo "Error: 'publishConfig.access' is not set to 'public' in package.json."
            exit 1
          fi
          echo "✔ Publish config is set to public."

      - name: Verify version is greater than latest library-specific tag
        run: |
          PACKAGE_VERSION=${{ steps.get_version.outputs.version }}
          TAG_PATTERN="${{ inputs.library_name }}-v*"

          # Find the latest tag matching the library's pattern
          LATEST_TAG=$(git describe --tags --match "$TAG_PATTERN" `git rev-list --tags --max-count=1 --tags="$TAG_PATTERN"` 2>/dev/null) || echo "v0.0.0"

          # Extract version from tag (e.g., my-lib-v1.2.3 -> 1.2.3)
          LATEST_VERSION=${LATEST_TAG##*-v}

          echo "Latest tag for '${{ inputs.library_name }}': $LATEST_TAG (version $LATEST_VERSION)"
          echo "package.json version: $PACKAGE_VERSION"

          if [ "$(printf '%s\n' "$LATEST_VERSION" "$PACKAGE_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ] || [ "$LATEST_VERSION" == "$PACKAGE_VERSION" ]; then
            echo "Error: package.json version ($PACKAGE_VERSION) must be greater than latest tag version ($LATEST_VERSION)."
            exit 1
          fi
          echo "✔ Version check passed."
